{"version":3,"sources":["TableTickets.js","App.js","serviceWorker.js","index.js"],"names":["columns","dataIndex","title","sorter","a","b","locality","onFilter","value","record","indexOf","filters","text","system","render","entryid","react_default","createElement","href","concat","target","rel","tickets","require","TicketDetails","description","TableTickets","handleTableChange","pagination","console","log","table","dataSource","rowKey","onChange","this","expandedRowRender","scroll","x","React","Component","App","locale_provider","locale","ru_RU","BrowserRouter","Fragment","Link","to","Switch","Route","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qpBAIMA,UAAU,CACd,CACEC,UAAW,WACXC,MAAO,kBAEPC,OAAQ,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,SAAWD,EAAEC,UACjCC,SAAU,SAACC,EAAOC,GAAR,OAAsD,IAAnCA,EAAOH,SAASI,QAAQF,IACrDG,QAAS,CACP,CAAEC,KAAM,UAAWJ,MAAO,WAC1B,CAAEI,KAAM,SAAUJ,MAAO,UACzB,CAAEI,KAAM,UAAWJ,MAAO,WAC1B,CAAEI,KAAM,cAAeJ,MAAO,iBAGlC,CACEP,UAAW,SACXC,MAAO,cACPC,OAAQ,SAACC,EAAGC,GAAJ,OAAUD,EAAES,OAASR,EAAEQ,SAEjC,CACEZ,UAAW,UACXC,MAAO,aACPY,OAAQ,SAAAC,GAAO,OAAIC,EAAAZ,EAAAa,cAAA,KAAGC,KAAI,6BAAAC,OAA+BJ,GAAWK,OAAO,SAASC,IAAI,uBAAuBN,KAEjH,CACEd,UAAW,SACXC,MAAO,YAILoB,EAAUC,EAAQ,KAElBC,EAAgB,SAACf,GACrB,OACEO,EAAAZ,EAAAa,cAAA,WACGR,EAAOgB,cAwBCC,6MAlBbC,kBAAoB,SAACC,EAAYjB,EAASR,GACxC0B,QAAQC,IAAI3B,4EAGZ,OACEa,EAAAZ,EAAAa,cAACc,EAAA,EAAD,CACE/B,QAASA,EACTgC,WAAYV,EACZW,OAAO,KACPC,SAAUC,KAAKR,kBACfS,kBAAmBZ,EACnBI,YAAY,EACZS,OAAQ,CAAEC,GAAG,YAbMC,IAAMC,0EClBlBC,mLAlBX,OACEzB,EAAAZ,EAAAa,cAACyB,EAAA,EAAD,CAAgBC,OAAQC,KACtB5B,EAAAZ,EAAAa,cAAC4B,EAAA,EAAD,KACE7B,EAAAZ,EAAAa,cAACD,EAAAZ,EAAM0C,SAAP,KACE9B,EAAAZ,EAAAa,cAAC8B,EAAA,EAAD,CAAMC,GAAG,SAAT,iBACAhC,EAAAZ,EAAAa,cAACgC,EAAA,EAAD,KAEEjC,EAAAZ,EAAAa,cAACiC,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW3B,IACjCV,EAAAZ,EAAAa,cAACiC,EAAA,EAAD,CAAOC,KAAK,QAAQC,OAAK,EAACC,UAAW3B,IACrCV,EAAAZ,EAAAa,cAACiC,EAAA,EAAD,CAAOG,UAAW,kBAAMrC,EAAAZ,EAAAa,cAAA,gCAXpBsB,IAAMC,WCMJc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS7C,OAAOE,EAAAZ,EAAAa,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a4c6a2e9.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Table } from 'antd';\r\nimport './TableTickets.css'\r\n\r\nconst columns = [\r\n  {\r\n    dataIndex: 'locality',\r\n    title: 'Locality (City)',\r\n    // filtered: true,\r\n    sorter: (a, b) => a.locality > b.locality,\r\n    onFilter: (value, record) => record.locality.indexOf(value) === 0,\r\n    filters: [\r\n      { text: 'Irkutsk', value: 'Irkutsk' },\r\n      { text: 'Rostov', value: 'Rostov' },\r\n      { text: 'Saransk', value: 'Saransk' },\r\n      { text: 'Chelyabinsk', value: 'Chelyabinsk' },\r\n    ],\r\n  },\r\n  {\r\n    dataIndex: 'system',\r\n    title: 'System name',\r\n    sorter: (a, b) => a.system > b.system\r\n  },\r\n  {\r\n    dataIndex: 'entryid',\r\n    title: 'BPM Ticket',\r\n    render: entryid => <a href={`https://bpmonline.com/?tt=${entryid}`} target='_blank' rel='noreferrer noopener'>{entryid}</a>,\r\n  },\r\n  {\r\n    dataIndex: 'status',\r\n    title: 'Status'\r\n  }\r\n];\r\n\r\nconst tickets = require('./data/tickets.json');\r\n\r\nconst TicketDetails = (record) => {\r\n  return (\r\n    <div>\r\n      {record.description}\r\n    </div>\r\n  );\r\n}\r\n\r\nclass TableTickets extends React.Component {\r\n  handleTableChange = (pagination, filters, sorter) => {\r\n    console.log(sorter)\r\n  }\r\n  render() {\r\n    return (\r\n      <Table\r\n        columns={columns}\r\n        dataSource={tickets}\r\n        rowKey='id'\r\n        onChange={this.handleTableChange}\r\n        expandedRowRender={TicketDetails}\r\n        pagination={false}\r\n        scroll={{ x: true }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableTickets;","import React from 'react';\nimport TableTickets from './TableTickets';\nimport { LocaleProvider } from 'antd';\nimport ru_RU from 'antd/lib/locale-provider/ru_RU';\nimport { BrowserRouter as Router, Route, Link, Switch, Redirect } from \"react-router-dom\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <LocaleProvider locale={ru_RU}>\n        <Router>\n          <React.Fragment>\n            <Link to='/ITSM' >Table tickets</Link>\n            <Switch>\n              {/* <Redirect from='/' to='/ITSM/' /> */}\n              <Route path=\"/\" exact component={TableTickets} />\n              <Route path=\"/ITSM\" exact component={TableTickets} />\n              <Route component={() => <div>404</div>} />\n            </Switch>\n          </React.Fragment>\n        </Router>\n      </LocaleProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}