{"version":3,"sources":["columns.js","TableTickets.js","ModalForm.js","TableTicketsAdmin.js","EditableTable.js","App.js","serviceWorker.js","index.js"],"names":["columns","dataIndex","title","editable","sorter","a","b","locality","localeCompare","onFilter","value","record","indexOf","filters","text","system","render","entryid","react_default","createElement","href","concat","target","rel","tickets","require","TicketDetails","Fragment","description","bdate","edate","TableTickets","handleTableChange","pagination","console","log","table","dataSource","onChange","this","expandedRowRender","React","Component","ModalForm","Form","create","_React$Component","_class","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","_this$props","props","visible","onCancel","onCreate","getFieldDecorator","form","formItemLayout","labelCol","span","wrapperCol","modal","okText","onOk","es_form","Item","assign","label","es_select","mode","Option","input","TextArea","autosize","minRows","es_checkbox","date_picker","TicketDetailsAdmin","state","showModal","_this","setState","handleCancel","handleCreate","formRef","validateFields","err","values","resetFields","saveFormRef","_this2","columns_new","toConsumableArray","es_button","shape","icon","onClick","popconfirm","onConfirm","type","src_ModalForm","wrappedComponentRef","data","FormItem","EditableContext","createContext","EditableFormRow","_ref","index","objectWithoutProperties","Provider","EditableCell","getInput","inputType","input_number","editing","restProps","Consumer","style","margin","rules","required","message","initialValue","children","EditableTable","_this3","call","isEditing","editingKey","cancel","save","marginRight","edit","_this4","error","row","newData","findIndex","item","splice","objectSpread","push","_this5","components","body","cell","map","col","onCell","bordered","size","rowClassName","App","locale_provider","locale","ru_RU","BrowserRouter","menu","theme","Link","to","Switch","Redirect","exact","from","Route","path","component","TableTicketsAdmin","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70d72248.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst columns = [\r\n  {\r\n    dataIndex: 'locality',\r\n    title: 'Locality (City)',\r\n    editable: true,\r\n    sorter: (a, b) => ('' + a.locality).localeCompare(b.locality),\r\n    onFilter: (value, record) => record.locality.indexOf(value) === 0,\r\n    filters: [\r\n      { text: 'Irkutsk', value: 'Irkutsk' },\r\n      { text: 'Rostov', value: 'Rostov' },\r\n      { text: 'Saransk', value: 'Saransk' },\r\n      { text: 'Chelyabinsk', value: 'Chelyabinsk' },\r\n    ],\r\n  },\r\n  {\r\n    dataIndex: 'system',\r\n    title: 'System name',\r\n    editable: true,\r\n    sorter: (a, b) => a.system > b.system,\r\n  },\r\n  {\r\n    dataIndex: 'entryid',\r\n    title: 'BPM Ticket',\r\n    editable: true,\r\n    render: entryid => (\r\n      <a\r\n        href={`https://bpmonline.com/?tt=${entryid}`}\r\n        target=\"_blank\"\r\n        rel=\"noreferrer noopener\"\r\n      >\r\n        {entryid}\r\n      </a>\r\n    ),\r\n  },\r\n  {\r\n    dataIndex: 'status',\r\n    title: 'Status',\r\n    editable: true,\r\n  },\r\n];\r\n\r\nexport default columns;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport './TableTickets.css';\r\nimport columns from './columns';\r\n\r\nconst tickets = require('./data/tickets.json');\r\n\r\nconst TicketDetails = record => {\r\n  return (\r\n    <>\r\n      <div>\r\n        <b>Description:</b> {record.description}\r\n      </div>\r\n      <div>\r\n        <b>Date start:</b> {record.bdate}\r\n      </div>\r\n      <div>\r\n        <b>Date end:</b> {record.edate}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nclass TableTickets extends React.Component {\r\n  handleTableChange = (pagination, filters, sorter) => {\r\n    console.log(sorter);\r\n  };\r\n  render() {\r\n    return (\r\n      <Table\r\n        columns={columns}\r\n        dataSource={tickets}\r\n        // rowKey=\"id\"\r\n        onChange={this.handleTableChange}\r\n        expandedRowRender={TicketDetails}\r\n        pagination={false}\r\n        // scroll={{ x: true }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableTickets;\r\n","import React from 'react';\r\nimport { Form, Modal, Input, Radio, Select, Checkbox, DatePicker } from 'antd';\r\n\r\nconst ModalForm = Form.create()(\r\n  class extends React.Component {\r\n    render() {\r\n      const { visible, onCancel, onCreate, form } = this.props;\r\n      const { getFieldDecorator } = form;\r\n      const formItemLayout = {\r\n        labelCol: { span: 6 },\r\n        wrapperCol: { span: 18 },\r\n      };\r\n      return (\r\n        <Modal\r\n          visible={visible}\r\n          title=\"Create a new Ticket\"\r\n          okText=\"Create\"\r\n          onCancel={onCancel}\r\n          onOk={onCreate}\r\n        >\r\n          <Form>\r\n            <Form.Item {...formItemLayout} label=\"Locality (City)\">\r\n              {getFieldDecorator('title')(\r\n                <Select mode=\"multiple\">\r\n                  <Select.Option value=\"0\">Irkutsk</Select.Option>\r\n                  <Select.Option value=\"1\">Rostov-on-Don</Select.Option>\r\n                  <Select.Option value=\"2\">Saransk</Select.Option>\r\n                  <Select.Option value=\"3\">Chelyabinsk</Select.Option>\r\n                </Select>\r\n              )}\r\n            </Form.Item>\r\n            <Form.Item {...formItemLayout} label=\"System\">\r\n              {getFieldDecorator('system')(\r\n                <Select>\r\n                  <Select.Option value=\"0\">BPM</Select.Option>\r\n                  <Select.Option value=\"1\">CRM</Select.Option>\r\n                  <Select.Option value=\"2\">Mail</Select.Option>\r\n                  <Select.Option value=\"3\">Internet</Select.Option>\r\n                </Select>\r\n              )}\r\n            </Form.Item>\r\n            <Form.Item {...formItemLayout} label=\"Description\">\r\n              {getFieldDecorator('description')(\r\n                <Input.TextArea autosize={{ minRows: 2 }} />\r\n              )}\r\n            </Form.Item>\r\n            <Form.Item {...formItemLayout} label=\"BPM Ticket ID\">\r\n              {getFieldDecorator('descentryidription')(<Input />)}\r\n            </Form.Item>\r\n            <Form.Item {...formItemLayout} label=\"Is open?\">\r\n              {getFieldDecorator('status')(<Checkbox />)}\r\n            </Form.Item>\r\n            <Form.Item {...formItemLayout} label=\"Date start\">\r\n              {getFieldDecorator('bdate')(<DatePicker />)}\r\n            </Form.Item>\r\n            <Form.Item {...formItemLayout} label=\"Date end\">\r\n              {getFieldDecorator('edate')(<DatePicker />)}\r\n            </Form.Item>\r\n          </Form>\r\n        </Modal>\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\nexport default ModalForm;\r\n","import React from 'react';\r\nimport { Table, Button, Popconfirm } from 'antd';\r\nimport './TableTickets.css';\r\nimport columns from './columns';\r\nimport ModalForm from './ModalForm';\r\n\r\nconst tickets = require('./data/tickets.json');\r\n\r\nconst TicketDetailsAdmin = record => {\r\n  return (\r\n    <>\r\n      <div>\r\n        <b>Description:</b> {record.description}\r\n      </div>\r\n      <div>\r\n        <b>Date start:</b> {record.bdate}\r\n      </div>\r\n      <div>\r\n        <b>Date end:</b> {record.edate}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nclass TableTickets extends React.Component {\r\n  state = {\r\n    visible: false,\r\n  };\r\n\r\n  showModal = () => {\r\n    this.setState({ visible: true });\r\n  };\r\n\r\n  handleCancel = () => {\r\n    this.setState({ visible: false });\r\n  };\r\n\r\n  handleCreate = () => {\r\n    const form = this.formRef.props.form;\r\n    form.validateFields((err, values) => {\r\n      if (err) {\r\n        return;\r\n      }\r\n\r\n      console.log('Received values of form: ', values);\r\n      form.resetFields();\r\n      this.setState({ visible: false });\r\n    });\r\n  };\r\n\r\n  saveFormRef = formRef => {\r\n    this.formRef = formRef;\r\n  };\r\n\r\n  handleTableChange = (pagination, filters, sorter) => {\r\n    console.log(sorter);\r\n  };\r\n  render() {\r\n    const columns_new = [\r\n      ...columns,\r\n      {\r\n        title: 'operation',\r\n        dataIndex: 'operation',\r\n        render: (text, record) => (\r\n          <>\r\n            <Button\r\n              shape=\"circle\"\r\n              icon=\"edit\"\r\n              title=\"edit\"\r\n              onClick={() => this.showModal(record)}\r\n            />\r\n            &nbsp;\r\n            <Popconfirm\r\n              title=\"Sure to cancel?\"\r\n              onConfirm={() => console.log(record.key)}\r\n            >\r\n              <Button shape=\"circle\" icon=\"delete\" title=\"delete\" />\r\n            </Popconfirm>\r\n          </>\r\n        ),\r\n      },\r\n    ];\r\n    return (\r\n      <>\r\n        <Button type=\"primary\" onClick={this.showModal}>\r\n          New Ticket\r\n        </Button>\r\n        <ModalForm\r\n          wrappedComponentRef={this.saveFormRef}\r\n          visible={this.state.visible}\r\n          onCancel={this.handleCancel}\r\n          onCreate={this.handleCreate}\r\n        />\r\n        <Table\r\n          columns={columns_new}\r\n          dataSource={tickets}\r\n          // rowKey=\"id\"\r\n          onChange={this.handleTableChange}\r\n          expandedRowRender={TicketDetailsAdmin}\r\n          pagination={false}\r\n          // scroll={{ x: true }}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableTickets;\r\n","import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport './index.css';\r\nimport { Table, Input, InputNumber, Popconfirm, Form, Button } from 'antd';\r\nimport columns from './columns';\r\n\r\nconst data = require('./data/tickets.json');\r\n\r\n// const data = [];\r\n// for (let i = 0; i < 20; i++) {\r\n//   data.push({\r\n//     key: i.toString(),\r\n//     name: `Edrward ${i}`,\r\n//     age: 32,\r\n//     address: `London Park no. ${i}`,\r\n//   });\r\n// }\r\nconst FormItem = Form.Item;\r\nconst EditableContext = React.createContext();\r\n\r\nconst EditableRow = ({ form, index, ...props }) => (\r\n  <EditableContext.Provider value={form}>\r\n    <tr {...props} />\r\n  </EditableContext.Provider>\r\n);\r\n\r\nconst EditableFormRow = Form.create()(EditableRow);\r\n\r\nclass EditableCell extends React.Component {\r\n  getInput = () => {\r\n    if (this.props.inputType === 'number') {\r\n      return <InputNumber />;\r\n    }\r\n    return <Input />;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      editing,\r\n      dataIndex,\r\n      title,\r\n      inputType,\r\n      record,\r\n      index,\r\n      ...restProps\r\n    } = this.props;\r\n    return (\r\n      <EditableContext.Consumer>\r\n        {form => {\r\n          const { getFieldDecorator } = form;\r\n          return (\r\n            <td {...restProps}>\r\n              {editing ? (\r\n                <FormItem style={{ margin: 0 }}>\r\n                  {getFieldDecorator(dataIndex, {\r\n                    rules: [\r\n                      {\r\n                        required: true,\r\n                        message: `Please Input ${title}!`,\r\n                      },\r\n                    ],\r\n                    initialValue: record[dataIndex],\r\n                  })(this.getInput())}\r\n                </FormItem>\r\n              ) : (\r\n                restProps.children\r\n              )}\r\n            </td>\r\n          );\r\n        }}\r\n      </EditableContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nclass EditableTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { data, editingKey: '' };\r\n    this.columns = [\r\n      ...columns,\r\n      {\r\n        title: 'operation',\r\n        dataIndex: 'operation',\r\n        render: (text, record) => {\r\n          const editable = this.isEditing(record);\r\n          return (\r\n            <div>\r\n              {editable ? (\r\n                <span>\r\n                  <EditableContext.Consumer>\r\n                    {form => (\r\n                      <Button\r\n                        onClick={() => this.save(form, record.key)}\r\n                        style={{ marginRight: 8 }}\r\n                      >\r\n                        Save\r\n                      </Button>\r\n                    )}\r\n                  </EditableContext.Consumer>\r\n                  <Popconfirm\r\n                    title=\"Sure to cancel?\"\r\n                    onConfirm={() => this.cancel(record.key)}\r\n                  >\r\n                    <Button>Cancel</Button>\r\n                  </Popconfirm>\r\n                </span>\r\n              ) : (\r\n                <Button\r\n                  shape=\"circle\"\r\n                  icon=\"edit\"\r\n                  onClick={() => this.edit(record.key)}\r\n                />\r\n              )}\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    ];\r\n  }\r\n\r\n  isEditing = record => {\r\n    return record.key === this.state.editingKey;\r\n  };\r\n\r\n  edit(key) {\r\n    this.setState({ editingKey: key });\r\n  }\r\n\r\n  save(form, key) {\r\n    form.validateFields((error, row) => {\r\n      if (error) {\r\n        return;\r\n      }\r\n      const newData = [...this.state.data];\r\n      const index = newData.findIndex(item => key === item.key);\r\n      if (index > -1) {\r\n        const item = newData[index];\r\n        newData.splice(index, 1, {\r\n          ...item,\r\n          ...row,\r\n        });\r\n        this.setState({ data: newData, editingKey: '' });\r\n      } else {\r\n        newData.push(row);\r\n        this.setState({ data: newData, editingKey: '' });\r\n      }\r\n    });\r\n  }\r\n\r\n  cancel = () => {\r\n    this.setState({ editingKey: '' });\r\n  };\r\n\r\n  render() {\r\n    const components = {\r\n      body: {\r\n        row: EditableFormRow,\r\n        cell: EditableCell,\r\n      },\r\n    };\r\n\r\n    const columns = this.columns.map(col => {\r\n      if (!col.editable) {\r\n        return col;\r\n      }\r\n      return {\r\n        ...col,\r\n        onCell: record => ({\r\n          record,\r\n          inputType: 'text',\r\n          dataIndex: col.dataIndex,\r\n          title: col.title,\r\n          editing: this.isEditing(record),\r\n        }),\r\n      };\r\n    });\r\n\r\n    return (\r\n      <Table\r\n        components={components}\r\n        bordered\r\n        dataSource={this.state.data}\r\n        columns={columns}\r\n        pagination={false}\r\n        size=\"middle\"\r\n        // rowKey=\"id\"\r\n        rowClassName=\"editable-row\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditableTable;\r\n","import React from 'react';\r\nimport TableTickets from './TableTickets';\r\nimport TableTicketsAdmin from './TableTicketsAdmin';\r\nimport EditableTable from './EditableTable';\r\nimport { LocaleProvider, Menu } from 'antd';\r\nimport ru_RU from 'antd/lib/locale-provider/ru_RU';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Link,\r\n  Switch,\r\n  Redirect,\r\n} from 'react-router-dom';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <LocaleProvider locale={ru_RU}>\r\n        <Router>\r\n          <>\r\n            <Menu mode=\"horizontal\" theme=\"dark\">\r\n              <Menu.Item>\r\n                <Link to=\"/ITSM\">Tickets</Link>\r\n              </Menu.Item>\r\n              <Menu.Item>\r\n                <Link to=\"/ITSM/admin\">Admin</Link>\r\n              </Menu.Item>\r\n              <Menu.Item>\r\n                <Link to=\"/ITSM/edit\">Edit</Link>\r\n              </Menu.Item>\r\n            </Menu>\r\n            <h1>IT Service Management</h1>\r\n\r\n            <Switch>\r\n              <Redirect exact from=\"/\" to=\"/ITSM/\" />\r\n              <Route exact path=\"/ITSM\" component={TableTickets} />\r\n              <Route exact path=\"/ITSM/edit\" component={EditableTable} />\r\n              <Route exact path=\"/ITSM/admin\" component={TableTicketsAdmin} />\r\n              <Route component={() => <div>404. Page Not Found</div>} />\r\n            </Switch>\r\n          </>\r\n        </Router>\r\n      </LocaleProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}