{"version":3,"sources":["columns.js","TableTickets.js","ModalForm.js","TableTicketsAdmin.js","EditableTable.js","auth.js","App.js","serviceWorker.js","index.js"],"names":["fields","dataIndex","title","visible","required","sorter","a","b","locality","localeCompare","onFilter","value","record","indexOf","filters","text","formComponent","react_default","createElement","es_select","Option","system","input","TextArea","autosize","minRows","render","entryid","href","concat","target","rel","isopen","es_checkbox","disabled","checked","parseInt","date_picker","columns","filter","val","tickets","require","TicketDetails","Fragment","description","bdate","edate","TableTickets","handleTableChange","pagination","console","log","table","dataSource","onChange","this","expandedRowRender","React","Component","ModalForm","Form","create","_React$Component","_class","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","props","_this$props","onCancel","onOk","form","getFieldDecorator","formItemLayout","labelCol","span","wrapperCol","formItems","map","f","es_form","Item","assign","label","rules","message","valuePropName","initialValue","moment","isValid","modal","TicketDetailsAdmin","state","showModal","_this","setState","handleModalCancel","handleModalOk","formRef","validateFields","err","values","resetFields","saveFormRef","_this2","info","columns_new","toConsumableArray","es_button","shape","icon","onClick","popconfirm","onConfirm","type","src_ModalForm","wrappedComponentRef","size","rowClassName","index","data","FormItem","EditableContext","createContext","EditableFormRow","_ref","objectWithoutProperties","Provider","EditableCell","getInput","inputType","input_number","editing","restProps","Consumer","style","margin","children","EditableTable","_this3","call","isEditing","editingKey","cancel","editable","save","marginRight","edit","_this4","error","row","newData","findIndex","item","splice","objectSpread","push","_this5","components","body","cell","col","onCell","bordered","hasRole","user","roles","some","role","includes","rights","App","locale_provider","locale","ru_RU","BrowserRouter","menu","mode","prevState","Link","to","Switch","Redirect","exact","from","Route","path","component","TableTicketsAdmin","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8be85d47.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Input, Select, Checkbox, DatePicker } from 'antd';\r\n\r\nexport const fields = [\r\n  {\r\n    dataIndex: 'locality',\r\n    title: 'Locality (City)',\r\n    visible: true,\r\n    required: true,\r\n    sorter: (a, b) => ('' + a.locality).localeCompare(b.locality),\r\n    onFilter: (value, record) => record.locality.indexOf(value) === 0,\r\n    filters: [\r\n      { text: 'Irkutsk', value: 'Irkutsk' },\r\n      { text: 'Rostov', value: 'Rostov' },\r\n      { text: 'Saransk', value: 'Saransk' },\r\n      { text: 'Chelyabinsk', value: 'Chelyabinsk' },\r\n    ],\r\n    formComponent: (\r\n      <Select>\r\n        <Select.Option value=\"0\">Irkutsk</Select.Option>\r\n        <Select.Option value=\"1\">Rostov-on-Don</Select.Option>\r\n        <Select.Option value=\"2\">Saransk</Select.Option>\r\n        <Select.Option value=\"3\">Chelyabinsk</Select.Option>\r\n      </Select>\r\n    ),\r\n  },\r\n  {\r\n    dataIndex: 'system',\r\n    title: 'System name',\r\n    visible: true,\r\n    required: false,\r\n    sorter: (a, b) => a.system > b.system,\r\n    formComponent: (\r\n      <Select>\r\n        <Select.Option value=\"0\">BPM</Select.Option>\r\n        <Select.Option value=\"1\">CRM</Select.Option>\r\n        <Select.Option value=\"2\">Mail</Select.Option>\r\n        <Select.Option value=\"3\">Internet</Select.Option>\r\n      </Select>\r\n    ),\r\n  },\r\n  {\r\n    dataIndex: 'description',\r\n    title: 'Description',\r\n    visible: false,\r\n    required: false,\r\n    formComponent: <Input.TextArea autosize={{ minRows: 2 }} />,\r\n  },\r\n  {\r\n    dataIndex: 'entryid',\r\n    title: 'BPM Ticket',\r\n    visible: true,\r\n    required: false,\r\n    render: entryid => (\r\n      <a\r\n        href={`https://bpmonline.com/?tt=${entryid}`}\r\n        target=\"_blank\"\r\n        rel=\"noreferrer noopener\"\r\n      >\r\n        {entryid}\r\n      </a>\r\n    ),\r\n    formComponent: <Input />,\r\n  },\r\n  {\r\n    dataIndex: 'isopen',\r\n    title: 'Is open?',\r\n    visible: true,\r\n    required: false,\r\n    render: (isopen, record) => <Checkbox disabled checked={isopen} />,\r\n    sorter: (a, b) => a.isopen - b.isopen,\r\n    onFilter: (value, record) => parseInt(value) === record.isopen,\r\n    filters: [{ text: 'Open', value: 1 }, { text: 'Close', value: 0 }],\r\n    formComponent: <Checkbox />,\r\n  },\r\n  {\r\n    dataIndex: 'bdate',\r\n    title: 'Date start',\r\n    visible: false,\r\n    required: false,\r\n    formComponent: <DatePicker />,\r\n  },\r\n  {\r\n    dataIndex: 'edate',\r\n    title: 'Date end',\r\n    visible: false,\r\n    required: false,\r\n    formComponent: <DatePicker />,\r\n  },\r\n];\r\n\r\nconst columns = fields.filter(val => val.visible);\r\n\r\nexport default columns;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport './TableTickets.css';\r\nimport columns from './columns';\r\n\r\nconst tickets = require('./data/tickets.json');\r\n\r\nconst TicketDetails = record => {\r\n  return (\r\n    <>\r\n      <div>\r\n        <b>Description:</b> {record.description}\r\n      </div>\r\n      <div>\r\n        <b>Date start:</b> {record.bdate}\r\n      </div>\r\n      <div>\r\n        <b>Date end:</b> {record.edate}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nclass TableTickets extends React.Component {\r\n  handleTableChange = (pagination, filters, sorter) => {\r\n    console.log(sorter);\r\n  };\r\n  render() {\r\n    return (\r\n      <Table\r\n        columns={columns}\r\n        dataSource={tickets}\r\n        // rowKey=\"id\"\r\n        onChange={this.handleTableChange}\r\n        expandedRowRender={TicketDetails}\r\n        pagination={false}\r\n        // scroll={{ x: true }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableTickets;\r\n","import React from 'react';\r\nimport { Form, Modal } from 'antd';\r\nimport moment from 'moment';\r\nimport { fields } from './columns';\r\n\r\nconst ModalForm = Form.create()(\r\n  class extends React.Component {\r\n    render() {\r\n      console.log('Render ModalForm, record =', this.props.record);\r\n      const { visible, onCancel, onOk, form, record } = this.props;\r\n      const { getFieldDecorator } = form;\r\n      const formItemLayout = {\r\n        labelCol: { span: 6 },\r\n        wrapperCol: { span: 18 },\r\n      };\r\n      const formItems = fields.map(f => (\r\n        <Form.Item {...formItemLayout} label={f.title} key={f.dataIndex}>\r\n          {getFieldDecorator(f.dataIndex, {\r\n            rules: [\r\n              {\r\n                required: f.required,\r\n                message: `Please Input ${f.title}!`,\r\n              },\r\n            ],\r\n            valuePropName: f.dataIndex === 'isopen' ? 'checked' : 'value',\r\n            initialValue:\r\n              f.dataIndex === 'bdate' || f.dataIndex === 'edate'\r\n                ? moment(record[f.dataIndex]).isValid()\r\n                  ? moment(record[f.dataIndex])\r\n                  : null\r\n                : record[f.dataIndex],\r\n          })(f.formComponent)}\r\n        </Form.Item>\r\n      ));\r\n      return (\r\n        <Modal\r\n          visible={visible}\r\n          title=\"Ticket properties\"\r\n          onCancel={onCancel}\r\n          onOk={onOk}\r\n        >\r\n          <Form>{formItems}</Form>\r\n        </Modal>\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\nexport default ModalForm;\r\n","import React from 'react';\r\nimport { Table, Button, Popconfirm } from 'antd';\r\nimport './TableTickets.css';\r\nimport columns, { fields } from './columns';\r\nimport ModalForm from './ModalForm';\r\n\r\nconst tickets = require('./data/tickets.json');\r\n\r\nconst TicketDetailsAdmin = record => {\r\n  const additional_fields = fields.filter(val => !val.visible);\r\n  return additional_fields.map(f => (\r\n    <div key={f.dataIndex}>\r\n      <b>{f.title}:</b> {record[f.dataIndex]}\r\n    </div>\r\n  ));\r\n};\r\nclass TableTickets extends React.Component {\r\n  state = {\r\n    visible: false,\r\n    record: {},\r\n  };\r\n\r\n  showModal = record => {\r\n    this.setState({ visible: true, record });\r\n  };\r\n\r\n  handleModalCancel = () => {\r\n    this.setState({ visible: false });\r\n  };\r\n\r\n  handleModalOk = () => {\r\n    const form = this.formRef.props.form;\r\n    form.validateFields((err, values) => {\r\n      if (err) {\r\n        return;\r\n      }\r\n\r\n      console.log('Received values of form: ', values);\r\n      form.resetFields();\r\n      this.setState({ visible: false });\r\n    });\r\n  };\r\n\r\n  saveFormRef = formRef => {\r\n    this.formRef = formRef;\r\n  };\r\n\r\n  render() {\r\n    console.info('TableTicketsAdmin render');\r\n    const columns_new = [\r\n      ...columns,\r\n      {\r\n        title: 'operation',\r\n        dataIndex: 'operation',\r\n        render: (text, record) => (\r\n          <>\r\n            <Button\r\n              shape=\"circle\"\r\n              icon=\"edit\"\r\n              title=\"edit\"\r\n              onClick={() => this.showModal(record)}\r\n            />\r\n            &nbsp;\r\n            <Popconfirm\r\n              title=\"Sure to cancel?\"\r\n              onConfirm={() => console.log(record.key)}\r\n            >\r\n              <Button shape=\"circle\" icon=\"delete\" title=\"delete\" />\r\n            </Popconfirm>\r\n          </>\r\n        ),\r\n      },\r\n    ];\r\n    return (\r\n      <>\r\n        <Button type=\"primary\" onClick={() => this.showModal}>\r\n          New Ticket\r\n        </Button>\r\n        <ModalForm\r\n          wrappedComponentRef={this.saveFormRef}\r\n          visible={this.state.visible}\r\n          onCancel={this.handleModalCancel}\r\n          onOk={this.handleModalOk}\r\n          record={this.state.record}\r\n        />\r\n        <br />\r\n        <br />\r\n        <Table\r\n          columns={columns_new}\r\n          dataSource={tickets}\r\n          onChange={this.handleTableChange}\r\n          expandedRowRender={TicketDetailsAdmin}\r\n          pagination={false}\r\n          size=\"middle\"\r\n          rowClassName={(record, index) =>\r\n            record.isopen ? 'ticket-opened' : 'ticket-closed'\r\n          }\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableTickets;\r\n","import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport './index.css';\r\nimport { Table, Input, InputNumber, Popconfirm, Form, Button } from 'antd';\r\nimport columns from './columns';\r\n\r\nconst data = require('./data/tickets.json');\r\n\r\n// const data = [];\r\n// for (let i = 0; i < 20; i++) {\r\n//   data.push({\r\n//     key: i.toString(),\r\n//     name: `Edrward ${i}`,\r\n//     age: 32,\r\n//     address: `London Park no. ${i}`,\r\n//   });\r\n// }\r\nconst FormItem = Form.Item;\r\nconst EditableContext = React.createContext();\r\n\r\nconst EditableRow = ({ form, index, ...props }) => (\r\n  <EditableContext.Provider value={form}>\r\n    <tr {...props} />\r\n  </EditableContext.Provider>\r\n);\r\n\r\nconst EditableFormRow = Form.create()(EditableRow);\r\n\r\nclass EditableCell extends React.Component {\r\n  getInput = () => {\r\n    if (this.props.inputType === 'number') {\r\n      return <InputNumber />;\r\n    }\r\n    return <Input />;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      editing,\r\n      dataIndex,\r\n      title,\r\n      inputType,\r\n      record,\r\n      index,\r\n      ...restProps\r\n    } = this.props;\r\n    return (\r\n      <EditableContext.Consumer>\r\n        {form => {\r\n          const { getFieldDecorator } = form;\r\n          return (\r\n            <td {...restProps}>\r\n              {editing ? (\r\n                <FormItem style={{ margin: 0 }}>\r\n                  {getFieldDecorator(dataIndex, {\r\n                    rules: [\r\n                      {\r\n                        required: true,\r\n                        message: `Please Input ${title}!`,\r\n                      },\r\n                    ],\r\n                    initialValue: record[dataIndex],\r\n                  })(this.getInput())}\r\n                </FormItem>\r\n              ) : (\r\n                restProps.children\r\n              )}\r\n            </td>\r\n          );\r\n        }}\r\n      </EditableContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nclass EditableTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { data, editingKey: '' };\r\n    this.columns = [\r\n      ...columns,\r\n      {\r\n        title: 'operation',\r\n        dataIndex: 'operation',\r\n        render: (text, record) => {\r\n          const editable = this.isEditing(record);\r\n          return (\r\n            <div>\r\n              {editable ? (\r\n                <span>\r\n                  <EditableContext.Consumer>\r\n                    {form => (\r\n                      <Button\r\n                        onClick={() => this.save(form, record.key)}\r\n                        style={{ marginRight: 8 }}\r\n                      >\r\n                        Save\r\n                      </Button>\r\n                    )}\r\n                  </EditableContext.Consumer>\r\n                  <Popconfirm\r\n                    title=\"Sure to cancel?\"\r\n                    onConfirm={() => this.cancel(record.key)}\r\n                  >\r\n                    <Button>Cancel</Button>\r\n                  </Popconfirm>\r\n                </span>\r\n              ) : (\r\n                <Button\r\n                  shape=\"circle\"\r\n                  icon=\"edit\"\r\n                  onClick={() => this.edit(record.key)}\r\n                />\r\n              )}\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    ];\r\n  }\r\n\r\n  isEditing = record => {\r\n    return record.key === this.state.editingKey;\r\n  };\r\n\r\n  edit(key) {\r\n    this.setState({ editingKey: key });\r\n  }\r\n\r\n  save(form, key) {\r\n    form.validateFields((error, row) => {\r\n      if (error) {\r\n        return;\r\n      }\r\n      const newData = [...this.state.data];\r\n      const index = newData.findIndex(item => key === item.key);\r\n      if (index > -1) {\r\n        const item = newData[index];\r\n        newData.splice(index, 1, {\r\n          ...item,\r\n          ...row,\r\n        });\r\n        this.setState({ data: newData, editingKey: '' });\r\n      } else {\r\n        newData.push(row);\r\n        this.setState({ data: newData, editingKey: '' });\r\n      }\r\n    });\r\n  }\r\n\r\n  cancel = () => {\r\n    this.setState({ editingKey: '' });\r\n  };\r\n\r\n  render() {\r\n    const components = {\r\n      body: {\r\n        row: EditableFormRow,\r\n        cell: EditableCell,\r\n      },\r\n    };\r\n\r\n    const columns = this.columns.map(col => {\r\n      if (!col.editable) {\r\n        return col;\r\n      }\r\n      return {\r\n        ...col,\r\n        onCell: record => ({\r\n          record,\r\n          inputType: 'text',\r\n          dataIndex: col.dataIndex,\r\n          title: col.title,\r\n          editing: this.isEditing(record),\r\n        }),\r\n      };\r\n    });\r\n\r\n    return (\r\n      <Table\r\n        components={components}\r\n        bordered\r\n        dataSource={this.state.data}\r\n        columns={columns}\r\n        pagination={false}\r\n        size=\"middle\"\r\n        // rowKey=\"id\"\r\n        rowClassName=\"editable-row\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditableTable;\r\n","// https://alligator.io/react/simple-authorization/\r\n\r\nexport const isAuthenticated = user => !!user;\r\n\r\nexport const isAllowed = (user, rights) =>\r\n  rights.some(right => user.rights.includes(right));\r\n\r\nexport const hasRole = (user, roles) =>\r\n  roles.some(role => user.roles.includes(role));\r\n","import React from 'react';\r\nimport TableTickets from './TableTickets';\r\nimport TableTicketsAdmin from './TableTicketsAdmin';\r\nimport EditableTable from './EditableTable';\r\nimport { LocaleProvider, Menu } from 'antd';\r\nimport ru_RU from 'antd/lib/locale-provider/ru_RU';\r\nimport { BrowserRouter, Route, Link, Switch, Redirect } from 'react-router-dom';\r\nimport { hasRole, isAllowed } from './auth';\r\n\r\nconst user = {\r\n  roles: ['user'],\r\n  rights: ['can_view_articles'],\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: user,\r\n    };\r\n  }\r\n  render() {\r\n    const { user } = this.state;\r\n    return (\r\n      <LocaleProvider locale={ru_RU}>\r\n        <BrowserRouter>\r\n          <>\r\n            <Menu mode=\"horizontal\">\r\n              <Menu.Item\r\n                onClick={() =>\r\n                  this.setState(prevState => ({\r\n                    user: {\r\n                      roles: prevState.user.roles.includes('admin')\r\n                        ? ['user']\r\n                        : ['admin'],\r\n                    },\r\n                  }))\r\n                }\r\n              >\r\n                {user.roles.includes('admin') ? 'Logout' : 'Login'}\r\n              </Menu.Item>\r\n\r\n              <Menu.Item>\r\n                <Link to=\"/\">Tickets</Link>\r\n              </Menu.Item>\r\n              {hasRole(user, ['admin']) && (\r\n                <Menu.Item>\r\n                  <Link to=\"admin\">Admin</Link>\r\n                </Menu.Item>\r\n              )}\r\n            </Menu>\r\n\r\n            <h1>IT Service Management</h1>\r\n\r\n            <Switch>\r\n              <Redirect exact from=\"/\" to=\"/ITSM/\" />\r\n              <Route exact path=\"/ITSM\" component={TableTickets} />\r\n              {/* @TODO remove it */}\r\n              <Route exact path=\"/ITSM/edit\" component={EditableTable} />\r\n              {hasRole(user, ['admin']) && (\r\n                <Route exact path=\"/ITSM/admin\" component={TableTicketsAdmin} />\r\n              )}\r\n              <Route component={() => <div>404. Page Not Found</div>} />\r\n            </Switch>\r\n          </>\r\n        </BrowserRouter>\r\n      </LocaleProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}