{"version":3,"sources":["columns.js","TableTickets.js","EditableTable.js","App.js","serviceWorker.js","index.js"],"names":["columns","dataIndex","title","editable","sorter","a","b","locality","localeCompare","onFilter","value","record","indexOf","filters","text","system","render","entryid","react_default","createElement","href","concat","target","rel","tickets","require","TicketDetails","description","TableTickets","handleTableChange","pagination","console","log","table","dataSource","onChange","this","expandedRowRender","React","Component","data","FormItem","Form","Item","EditableContext","createContext","EditableFormRow","create","_ref","form","props","index","Object","objectWithoutProperties","Provider","EditableCell","getInput","_this","inputType","input_number","input","_this2","_this$props","editing","restProps","Consumer","getFieldDecorator","style","margin","rules","required","message","initialValue","children","EditableTable","_this3","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isEditing","key","state","editingKey","cancel","setState","toConsumableArray","es_button","onClick","save","marginRight","popconfirm","onConfirm","shape","icon","edit","_this4","validateFields","error","row","newData","findIndex","item","splice","objectSpread","push","_this5","components","body","cell","map","col","onCell","bordered","size","rowClassName","App","locale_provider","locale","ru_RU","BrowserRouter","Fragment","menu","mode","theme","Link","to","Switch","Redirect","exact","from","Route","path","component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.26662270.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst columns = [\r\n  {\r\n    dataIndex: 'locality',\r\n    title: 'Locality (City)',\r\n    editable: true,\r\n    sorter: (a, b) => ('' + a.locality).localeCompare(b.locality),\r\n    onFilter: (value, record) => record.locality.indexOf(value) === 0,\r\n    filters: [\r\n      { text: 'Irkutsk', value: 'Irkutsk' },\r\n      { text: 'Rostov', value: 'Rostov' },\r\n      { text: 'Saransk', value: 'Saransk' },\r\n      { text: 'Chelyabinsk', value: 'Chelyabinsk' },\r\n    ],\r\n  },\r\n  {\r\n    dataIndex: 'system',\r\n    title: 'System name',\r\n    editable: true,\r\n    sorter: (a, b) => a.system > b.system,\r\n  },\r\n  {\r\n    dataIndex: 'entryid',\r\n    title: 'BPM Ticket',\r\n    editable: true,\r\n    render: entryid => (\r\n      <a\r\n        href={`https://bpmonline.com/?tt=${entryid}`}\r\n        target=\"_blank\"\r\n        rel=\"noreferrer noopener\"\r\n      >\r\n        {entryid}\r\n      </a>\r\n    ),\r\n  },\r\n  {\r\n    dataIndex: 'status',\r\n    title: 'Status',\r\n    editable: true,\r\n  },\r\n];\r\n\r\nexport default columns;\r\n","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport './TableTickets.css';\r\nimport columns from './columns';\r\n\r\nconst tickets = require('./data/tickets.json');\r\n\r\nconst TicketDetails = record => {\r\n  return <div>{record.description}</div>;\r\n};\r\n/**\r\n * @todo Add interactivity\r\n * @body Test\r\n */\r\nclass TableTickets extends React.Component {\r\n  handleTableChange = (pagination, filters, sorter) => {\r\n    console.log(sorter);\r\n  };\r\n  render() {\r\n    return (\r\n      <Table\r\n        columns={columns}\r\n        dataSource={tickets}\r\n        // rowKey=\"id\"\r\n        onChange={this.handleTableChange}\r\n        expandedRowRender={TicketDetails}\r\n        pagination={false}\r\n        // scroll={{ x: true }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableTickets;\r\n","import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport './index.css';\r\nimport { Table, Input, InputNumber, Popconfirm, Form, Button } from 'antd';\r\nimport columns from './columns';\r\n\r\nconst data = require('./data/tickets.json');\r\n\r\n// const data = [];\r\n// for (let i = 0; i < 20; i++) {\r\n//   data.push({\r\n//     key: i.toString(),\r\n//     name: `Edrward ${i}`,\r\n//     age: 32,\r\n//     address: `London Park no. ${i}`,\r\n//   });\r\n// }\r\nconst FormItem = Form.Item;\r\nconst EditableContext = React.createContext();\r\n\r\nconst EditableRow = ({ form, index, ...props }) => (\r\n  <EditableContext.Provider value={form}>\r\n    <tr {...props} />\r\n  </EditableContext.Provider>\r\n);\r\n\r\nconst EditableFormRow = Form.create()(EditableRow);\r\n\r\nclass EditableCell extends React.Component {\r\n  getInput = () => {\r\n    if (this.props.inputType === 'number') {\r\n      return <InputNumber />;\r\n    }\r\n    return <Input />;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      editing,\r\n      dataIndex,\r\n      title,\r\n      inputType,\r\n      record,\r\n      index,\r\n      ...restProps\r\n    } = this.props;\r\n    return (\r\n      <EditableContext.Consumer>\r\n        {form => {\r\n          const { getFieldDecorator } = form;\r\n          return (\r\n            <td {...restProps}>\r\n              {editing ? (\r\n                <FormItem style={{ margin: 0 }}>\r\n                  {getFieldDecorator(dataIndex, {\r\n                    rules: [\r\n                      {\r\n                        required: true,\r\n                        message: `Please Input ${title}!`,\r\n                      },\r\n                    ],\r\n                    initialValue: record[dataIndex],\r\n                  })(this.getInput())}\r\n                </FormItem>\r\n              ) : (\r\n                restProps.children\r\n              )}\r\n            </td>\r\n          );\r\n        }}\r\n      </EditableContext.Consumer>\r\n    );\r\n  }\r\n}\r\n\r\nclass EditableTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { data, editingKey: '' };\r\n    this.columns = [\r\n      ...columns,\r\n      {\r\n        title: 'operation',\r\n        dataIndex: 'operation',\r\n        render: (text, record) => {\r\n          const editable = this.isEditing(record);\r\n          return (\r\n            <div>\r\n              {editable ? (\r\n                <span>\r\n                  <EditableContext.Consumer>\r\n                    {form => (\r\n                      <Button\r\n                        onClick={() => this.save(form, record.key)}\r\n                        style={{ marginRight: 8 }}\r\n                      >\r\n                        Save\r\n                      </Button>\r\n                    )}\r\n                  </EditableContext.Consumer>\r\n                  <Popconfirm\r\n                    title=\"Sure to cancel?\"\r\n                    onConfirm={() => this.cancel(record.key)}\r\n                  >\r\n                    <Button>Cancel</Button>\r\n                  </Popconfirm>\r\n                </span>\r\n              ) : (\r\n                // <button onClick={() => this.edit(record.key)}>Edit</button>\r\n                <Button\r\n                  shape=\"circle\"\r\n                  icon=\"edit\"\r\n                  onClick={() => this.edit(record.key)}\r\n                />\r\n              )}\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    ];\r\n  }\r\n\r\n  isEditing = record => {\r\n    return record.key === this.state.editingKey;\r\n  };\r\n\r\n  edit(key) {\r\n    this.setState({ editingKey: key });\r\n  }\r\n\r\n  save(form, key) {\r\n    form.validateFields((error, row) => {\r\n      if (error) {\r\n        return;\r\n      }\r\n      const newData = [...this.state.data];\r\n      const index = newData.findIndex(item => key === item.key);\r\n      if (index > -1) {\r\n        const item = newData[index];\r\n        newData.splice(index, 1, {\r\n          ...item,\r\n          ...row,\r\n        });\r\n        this.setState({ data: newData, editingKey: '' });\r\n      } else {\r\n        newData.push(row);\r\n        this.setState({ data: newData, editingKey: '' });\r\n      }\r\n    });\r\n  }\r\n\r\n  cancel = () => {\r\n    this.setState({ editingKey: '' });\r\n  };\r\n\r\n  render() {\r\n    const components = {\r\n      body: {\r\n        row: EditableFormRow,\r\n        cell: EditableCell,\r\n      },\r\n    };\r\n\r\n    const columns = this.columns.map(col => {\r\n      if (!col.editable) {\r\n        return col;\r\n      }\r\n      return {\r\n        ...col,\r\n        onCell: record => ({\r\n          record,\r\n          inputType: 'text',\r\n          dataIndex: col.dataIndex,\r\n          title: col.title,\r\n          editing: this.isEditing(record),\r\n        }),\r\n      };\r\n    });\r\n\r\n    return (\r\n      <Table\r\n        components={components}\r\n        bordered\r\n        dataSource={this.state.data}\r\n        columns={columns}\r\n        pagination={false}\r\n        size=\"middle\"\r\n        // rowKey=\"id\"\r\n        rowClassName=\"editable-row\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditableTable;\r\n","import React from 'react';\nimport TableTickets from './TableTickets';\nimport EditableTable from './EditableTable';\nimport { LocaleProvider, Menu } from 'antd';\nimport ru_RU from 'antd/lib/locale-provider/ru_RU';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n  Switch,\n  Redirect,\n} from 'react-router-dom';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <LocaleProvider locale={ru_RU}>\n        <Router>\n          <React.Fragment>\n            <Menu mode=\"horizontal\" theme=\"dark\">\n              <Menu.Item>\n                <Link to=\"/ITSM\">Tickets</Link>\n              </Menu.Item>\n              <Menu.Item>\n                <Link to=\"/ITSM/admin\">Admin</Link>\n              </Menu.Item>\n              <Menu.Item>\n                <Link to=\"/ITSM/edit\">Edit</Link>\n              </Menu.Item>\n            </Menu>\n            <h1>IT Service Management</h1>\n\n            <Switch>\n              <Redirect exact from=\"/\" to=\"/ITSM/\" />\n              <Route exact path=\"/ITSM\" component={TableTickets} />\n              <Route exact path=\"/ITSM/edit\" component={EditableTable} />\n              <Route\n                exact\n                path=\"/ITSM/admin\"\n                component={() => <div>Admin page is not ready yet</div>}\n              />\n              <Route component={() => <div>404. Page Not Found</div>} />\n            </Switch>\n          </React.Fragment>\n        </Router>\n      </LocaleProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}